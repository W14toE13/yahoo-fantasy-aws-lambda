AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for yahoo-fantasy

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Globals:
#   Function:
#     Timeout: 900  # 15 minutes

Parameters:
  ClientId:
    Type: String
    Description: the yahoo applicaiton client id
    Default: dj0yJmk9VUFhM1Zab1QwT2QzJmQ9WVdrOVVVbGhNa0ZtUkRRbWNHbzlNQT09JnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTAw
  ClientSecret:
    Type: String
    Description: the yahoo applicaiton client secrect
    Default: b387ea999b6615b308c8a67fd3ea70f778e8703a
  AlternateDomainName:
    Type: String
    Description: The alternate domain name for the CloudFront distribution
    Default: fantasy.laohuang.org
  SSLCertificateArn:
    Type: String
    Description: The ARN of the existing SSL certificate
    Default: arn:aws:acm:us-east-1:711387121254:certificate/2e1c3799-2a39-4d43-906d-6fd5824344f7
  HostedZoneId:
    Type: String
    Description: The ID of the Route 53 hosted zone
    Default: Z00026602M1LG268PQ0LG

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-website'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'


  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      CorsConfiguration:
        AllowOrigins:
          - !Sub 'https://${AlternateDomainName}'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
          - X-Amz-User-Agent
        MaxAge: 600
        AllowCredentials: false

  WebSiteBucketOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Access Control for Static Website S3 Origin
        Name: !Sub "${AWS::StackName}-website-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4


  SecureResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: SecureResponseHeadersPolicy
        CorsConfig:
          AccessControlAllowCredentials: false
          AccessControlAllowHeaders:
            Items:
              - "Content-Type"
              - "Authorization"
              - "X-Amz-Date"
              - "X-Api-Key"
              - "X-Amz-Security-Token"
          AccessControlAllowMethods:
            Items:
              - GET
              - POST
              - OPTIONS
          AccessControlAllowOrigins:
            Items:
              - !Sub 'https://${AlternateDomainName}'
          AccessControlExposeHeaders:
            Items:
              - "Content-Length"
              - "Date"
          AccessControlMaxAgeSec: 600
          OriginOverride: true
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            ContentSecurityPolicy: "default-src 'self';"
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: no-referrer
            Override: true
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Preload: true
            Override: true
          XSSProtection:
            Protection: true
            ModeBlock: true
            Override: true

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3WebSiteOrigin
            DomainName: !GetAtt 'WebsiteBucket.RegionalDomainName'
            OriginAccessControlId: !GetAtt WebSiteBucketOriginAccessControl.Id
            S3OriginConfig: {}
          - Id: ApiGatewayOrigin
            DomainName: !Sub '${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3WebSiteOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # AWS managed CachingOptimized cache policy ID
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # AWS managed CORS-S3Origin origin request policy ID
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # AWS managed CachingDisabled cache policy ID
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AWS managed AllViewerExceptHostHeader origin request policy ID
            ResponseHeadersPolicyId: !Ref SecureResponseHeadersPolicy
          - PathPattern: '/data/**/*.png'
            TargetOriginId: S3WebSiteOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # AWS managed CachingDisabled cache policy ID
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # AWS managed CORS-S3Origin origin request policy ID
          - PathPattern: '/data/**/*.html'
            TargetOriginId: S3WebSiteOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # AWS managed CachingDisabled cache policy ID
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # AWS managed CORS-S3Origin origin request policy ID
        ViewerCertificate:
          AcmCertificateArn: !Ref 'SSLCertificateArn'
          SslSupportMethod: sni-only
        Aliases:
          - !Ref 'AlternateDomainName'
        PriceClass: PriceClass_100
        Enabled: true
        DefaultRootObject: index.html

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Ref 'AlternateDomainName'
      Type: A
      AliasTarget:
        DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID



  # IAM role for lambda functions
  LambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaLogging' # allow lambda functions to write logs to cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !GetAtt WebServerLogGroup.Arn
                  - !GetAtt LongRunningJobLogGroup.Arn
        - PolicyName: 'LambdaDynamoDBAccess' # allow lambda functions to access dynamodb tables
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource: 
                  - !GetAtt UserSessionTable.Arn
                  - !GetAtt LongRunningJobTable.Arn
        - PolicyName: 'LambdaS3Access' # allow lambda functions to access s3 bucket for data
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}'
              -
                Effect: Allow
                Action:
                  - 's3:*'
                Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/data/*'
        - PolicyName: 'LambdaInvokeFunction' # allow lambda functions to invoke other lambda functions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'

  # log groups for lambda functions
  WebServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-web-server'
      RetentionInDays: 1
  LongRunningJobLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-task'
      RetentionInDays: 1


  # lambda functions
  WebServerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      FunctionName: !Sub ${AWS::StackName}-web-server
      Architectures:
        - x86_64
      MemorySize: 128  # Set memory size to 128 MB
      Timeout: 30  # 30 seconds timeout
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            Path: /api/{proxy+}
            Method: ANY
      Environment:
        Variables:
          CLIENT_ID:  !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          DB_SESSION_TABLE: !Sub ${AWS::StackName}-session
          DB_TASK_TABLE: !Sub ${AWS::StackName}-task
          DATA_BUCKET_NAME: !Ref WebsiteBucket
          TASK_JOB_FUNCTION_NAME: !Ref LongRunningJobFunction
          BASE_URL: !Sub https://${AlternateDomainName}
      Role: !GetAtt LambdaExecRole.Arn
    Metadata:
      Dockerfile: Dockerfile_web_server
      DockerContext: .
      DockerTag: !Sub ${AWS::StackName}-web-server
  
  LongRunningJobFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      FunctionName:  !Sub ${AWS::StackName}-task
      Architectures:
        - x86_64
      MemorySize: 256  # Set memory size to 256 MB
      Timeout: 900  # 15 minutes in seconds
      Environment:
        Variables:
          CLIENT_ID:  !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          DB_SESSION_TABLE: !Sub ${AWS::StackName}-session
          DB_TASK_TABLE: !Sub ${AWS::StackName}-task
          DATA_BUCKET_NAME: !Ref WebsiteBucket
          BASE_URL: !Sub https://${AlternateDomainName}
      Role: !GetAtt LambdaExecRole.Arn
    Metadata:
      Dockerfile: Dockerfile_long_running_job
      DockerContext: .
      DockerTag: !Sub ${AWS::StackName}-task

  # dynamodb tables
  UserSessionTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: 'Retain'
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub '${AWS::StackName}-session'
      AttributeDefinitions:
        - AttributeType: 'S'
          AttributeName: 'sessionId'
      KeySchema:
        - KeyType: 'HASH'
          AttributeName: 'sessionId'
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: 'expireAt'

  LongRunningJobTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: 'Retain'
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub '${AWS::StackName}-task'
      AttributeDefinitions:
        - AttributeType: 'S'
          AttributeName: 'taskId'
      KeySchema:
        - KeyType: 'HASH'
          AttributeName: 'taskId'
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: 'expireAt'

